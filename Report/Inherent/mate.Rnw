<<InherentPerformance, echo=FALSE, message=FALSE>>=
knitr::opts_chunk$set(fig.width=10, fig.height=5,
                      echo=FALSE, warning=FALSE, message=FALSE, results="asis", cache=TRUE)

steady <- getWarmedupData("../../Data/inherent.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), 
                          c("SOMpe-Ent", "SOMmt", "MATEpe-Ent", "MATEmt"),
                          numberOfIterationsPerBenchmark)

steadyAWF <- getWarmedupData("../../Data/areWeFast.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), 
                          c("SOMpe-Ent", "SOMmt", "MATEpe-Ent", "MATEmt"),
                          numberOfIterationsPerBenchmark)

steadyOwn <- droplevels(subset(steady, VM == "SOMpe-Ent" | VM == "MATEmt" | VM== "SOMmt" | VM == "MATEpe-Ent")) 
# | VM == "MATEpe-Ent-envInObj" | VM == "SOMpe"))

steadyAWF <- droplevels(subset(steadyAWF, VM == "SOMpe-Ent" | VM == "MATEmt" | VM == "SOMmt" | VM == "MATEpe-Ent")) # | VM == "MATEpe-Ent-envInObj"  | VM=="SOMpe"))

steady <- rbind(steadyOwn, steadyAWF)

sompeSteady <- steady[steady$VM == "SOMpe-Ent",]
sommtSteady <- steady[steady$VM == "SOMmt",]

micro <- droplevels(subset(steady, Suite == "classic-micro-steady" | (Suite == "are-we-fast-som" & Benchmark %in% microBenchmarks)))
microWithoutRecursive <- droplevels(subset(micro, Benchmark != "Fibonacci" & Benchmark != "Recurse")) #& Benchmark != "Permute"
macro <- droplevels(subset(steady, Suite == "classic-macro-steady" | (Suite == "are-we-fast-som" & Benchmark %in% macroBenchmarks)))

steadyMT <- droplevels(subset(steady, VM %in% mtVMs))
steadyPE <- droplevels(subset(steady, VM %in% peVMs))

microMT <- droplevels(subset(micro, VM %in% mtVMs))
microPE <- droplevels(subset(micro, VM %in% peVMs))

microMTSummary <- summarizedPerBenchmark(microMT, c(0,10000), sommtSteady, "SOMmt")
microPESummary <- summarizedPerBenchmark(microPE, c(0,10000), sompeSteady, "SOMpe-Ent")

microWithoutRecursiveMT <- droplevels(subset(microWithoutRecursive, VM %in% mtVMs))
microWithoutRecursivePE <- droplevels(subset(microWithoutRecursive, VM %in% peVMs))
#microWithoutRecursiveMTSummary <- summarizedPerBenchmark(microWithoutRecursiveMT, c(0,10000), sommtSteady, "SOMmt")
#microWithoutRecursivePESummary <- summarizedPerBenchmark(microWithoutRecursivePE, c(0,10000), sompeSteady, "SOMpe-Ent")

macroMT <- droplevels(subset(macro, VM %in% mtVMs))
macroPE <- droplevels(subset(macro, VM %in% peVMs))
macroMTSummary <- summarizedPerBenchmark(macroMT, c(0,10000), sommtSteady, "SOMmt")
macroPESummary <- summarizedPerBenchmark(macroPE, c(0,10000), sompeSteady, "SOMpe-Ent")


#normalizedSteady <- rbind(normalizedSteadyMT, normalizedSteadyPE)
#micro <- rbind(microMTSummary, microPESummary)
#normalizedMicroWithoutRecursive <- rbind(normalizedMicroWithoutRecursiveMT, 
#                                         normalizedMicroWithoutRecursivePE)
#normalizedMacro <- rbind(normalizedMacroMT, normalizedMacroPE)

#summarizedSteady <- summarizeData(normalizedSteady)
#summarizedMicro <- summarizeData(normalizedMicro)
#summarizedMicroWithoutRecursive <- summarizeData(normalizedMicroWithoutRecursive)
#summarizedMacro <- summarizeData(normalizedMacro)

#overallSummarySteady <- summarizeOverall(summarizedSteady)
#overallSummaryMicro <- summarizeOverall(summarizedMicro)
#overallSummaryMicroWithoutRecursive <- summarizeOverall(summarizedMicroWithoutRecursive)
#overallSummaryMacro <- summarizeOverall(summarizedMacro)
@
\def\MicroPerfComparisonPlot{
<<perf-overview-micro, fig.width=5, fig.height=2, fig.cap='Overhead of TruffleMate normalized to TruffleSOM, clustered by micro and macro benchmarks, without (above) and with (below) optimizations', ,fig.align='center'>>=
print(boxplot(list(microMT, microPE), TRUE, "Run Time", list('SOMmt', 'SOMpe-Ent'), fill = TRUE))
@
}

\def\MicroTableSummary{%
<<micro-summary-table>>=
summaryData <- rbind(microMTSummary, microPESummary)[,c(2,1,7,8,3:6)]
print(
  kable(arrange(summaryData, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\MicroTableOverall{%
<<micro-overall-table>>=
overallData <- summarizeOverall(summaryData, ~ VM)
colnames <- c("Runtime", "Mean","CI-95%","Sd.", "Min","Max", "Median")
kable(arrange(overallData, Geomean), 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Overall Inherent Results for the Micro Benchmarks",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8)
@
}

\def\MacroPerfComparisonPlot{
<<perf-overview-macro, fig.width=5, fig.height=2, fig.cap='Overhead of TruffleMate normalized to TruffleSOM, clustered by micro and macro benchmarks, without (above) and with (below) optimizations', ,fig.align='center'>>=
print(boxplot(list(macroMT, macroPE), TRUE, "Run Time", list('SOMmt', 'SOMpe-Ent'), fill = TRUE))
@
}

\def\MacroTableSummary{%
<<macro-summary-table>>=
summaryData <- rbind(macroMTSummary, macroPESummary)[,c(2,1,7,8,3:6)]
print(
  kable(arrange(summaryData, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\MacroTableOverall{%
<<macro-overall-table>>=
overallData <- summarizeOverall(summaryData, ~ VM)
colnames <- c("Runtime", "Mean","CI-95%","Sd.", "Min","Max", "Median")
kable(arrange(overallData, Geomean), 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Overall Inherent Results for the Macro Benchmarks",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8)
@
}

\def\OverallTableOverall{%
<<inherent-overall-table>>=
summarizedSteady <- rbind(microMTSummary, microPESummary, macroMTSummary, macroPESummary)[,c(2,1,7,8,3:6)]
overallData <- summarizeOverall(summarizedSteady, ~ VM)
colnames <- c("Runtime", "Mean","CI-95%","Sd.", "Min","Max", "Median")
kable(arrange(overallData, Geomean), 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Overall Inherent Results",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8)
@
}