<<EphemeralPerformance, echo=FALSE, message=FALSE>>=
knitr::opts_chunk$set(fig.width=3.6, fig.height=1.2,
                      echo=FALSE, warning=FALSE, message=FALSE, results="asis", cache=TRUE)

steady <- getRawData("../../Data/reflectiveCompilation.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe"),
                          500)

name_map <- list(
  "RawAccumulator" = "Baseline",
  "EphemeralInstanceMigration" = "IM",
  "EphemeralInstanceMigrationUpdateDC" = "IM+Update",
  "EphemeralInstanceMigrationResetDC" = "IM+Reset"
)

steady <- change_names(steady, name_map, "Benchmark")

steady <- subset(steady,
               Iteration > 250 & Iteration < 350 & (Benchmark == "Baseline" | Benchmark == "IM" | Benchmark == "IM+Update" | 
Benchmark == "IM+Reset"))

steady <- ddply(steady, ~Benchmark, transform, xVal = Iteration - min(Iteration) + 1)
stats <- summarizeNotNormalizedData(steady)
@
\def\EphemeralPerfComparisonPlot{%
<<instance-migration, fig.width=5, fig.height=2, fig.cap='Peak performance execution time for the instance migration micro benchmark with ephemeral variability.', fig.align='center', out.width = "0.8\\textwidth">>=
dataFiltered <- subset(steady, Benchmark == "Baseline" | Benchmark == "IM" | Benchmark == "IM+Update" | Benchmark == "IM+Reset")
p <- ggplot(data=dataFiltered, aes(x=xVal, y=Value/1000, group = Benchmark, colour = Benchmark)) +
    xlab("Iteration") + ylab("Run Time (seconds)") +
    geom_line(size=0.3)  + 
    theme_classic() +
    theme(axis.title.x = element_text(size=8),
          axis.title.y = element_text(size=8, hjust=1),
          axis.text.x = element_text(size=8),
          axis.text.y = element_text(size=8),
          legend.text = element_text(size=8),
          legend.title = element_blank(),
          legend.key.height=unit(0.8,"line"))
#p <- p + expand_limits(x = 250, y = 0)
#    theme_bw() +
#    theme(legend.position=c(.7, .4))           # Position legend inside # This must go after theme_bw
print(p)  
@
}%

\def\EphemeralPerfMeanBaseline{%
<<perf-summary-bl, echo=FALSE, results="asis", cache=FALSE>>=
cat ((round(stats[stats$Benchmark == "Baseline",]$Time.mean)[1]))
@
}%

\def\EphemeralPerfMeanIM{%
<<perf-summary-im, echo=FALSE, results="asis", cache=FALSE>>=
cat (round(stats[stats$Benchmark == "IM",]$Time.mean))
@
}

\def\EphemeralPerfMeanIMUpdate{%
<<perf-summary-imu, echo=FALSE, results="asis", cache=FALSE>>=
cat (round(stats[stats$Benchmark == "IM+Update",]$Time.mean))
@
}

\def\EphemeralPerfMeanIMReset{%
<<perf-summary-imr, echo=FALSE, results="asis", cache=FALSE>>=
cat (round(stats[stats$Benchmark == "IM+Reset",]$Time.mean))
@
}