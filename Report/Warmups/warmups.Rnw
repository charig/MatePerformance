<<Warmups, echo=FALSE, message=FALSE>>=
knitr::opts_chunk$set(fig.width=4, fig.height=2,
                      echo=FALSE, warning=FALSE, message=FALSE, results="asis")

#AWF + Inherent
rawAWF <- getRawData("../../Data/areWeFast.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe", "SOMpe", "MATEmt", "SOMmt"), maxIteration = 99)

rawInherent <- getRawData("../../Data/inherent.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe", "SOMpe", "MATEmt", "SOMmt"), maxIteration = 99)

rawStandard <- rbind(rawAWF, rawInherent)
rawStandard <-droplevels(subset(rawStandard, Benchmark != "Fibonacci" & Benchmark != "Recurse"))

rawStandardNormalized <- normalizePerIteration(rawStandard,
                                               filterVMs,
                                               list(c("MATEpe","SOMpe"), c("MATEmt","SOMmt")),
                                               c("SOMpe", "SOMmt"), 
                                               FALSE)
#Individual
mop <- getRawData("../../Data/individualActivations.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe", "MATEmt"), maxIteration = 99)

allOperationsMop <- droplevels(subset(mop, (
				(Suite == "mop-operations-steady" & Benchmark != "VMReflectiveFieldRead" & Benchmark != "VMReflectiveFieldWrite"))))

duplicatedOps <- droplevels(subset(mop, Benchmark == "FieldRead" | Benchmark == "SeveralObjectsFieldRead" | Benchmark == "SeveralObjectsFieldRead2" | Benchmark == "FieldWrite" | Benchmark == "MessageSend"))

duplicatedOps <- change_names(duplicatedOps, list("FieldRead" = "LayoutFieldRead", "SeveralObjectsFieldRead" = "SeveralObjectsFieldReadOneMO", "SeveralObjectsFieldRead2" = "SeveralObjectsFieldReadOneMO2", "FieldWrite"	= "LayoutFieldWrite", "MessageSend"	= "MethodActivation"), "Benchmark")

allOperationsMop <- rbind(allOperationsMop, duplicatedOps)

duplicatedOps <- droplevels(subset(mop, Benchmark == "FieldRead"))
duplicatedOps <- change_names(duplicatedOps, list("FieldRead" = "Return"), "Benchmark")

allOperationsMop <- rbind(allOperationsMop, duplicatedOps)

allOperationsMop <- ddply(allOperationsMop, ~ Benchmark + VM , transform, 
	Var = grepl("Reflective", Benchmark),
	Benchmark = gsub("VMReflective", "", Benchmark))

levels(allOperationsMop$VM) <- c(levels(allOperationsMop$VM), "MATEpe-baseline", "MATEmt-baseline") 
allOperationsMop$VM[allOperationsMop$Var == TRUE & allOperationsMop$VM == "MATEpe"] <- "MATEpe-baseline"
allOperationsMop$VM[allOperationsMop$Var == TRUE & allOperationsMop$VM == "MATEmt"] <- "MATEmt-baseline"

allOperationsMop$Benchmark <- droplevels(factor(allOperationsMop$Benchmark))

name_map <- list(
	"LayoutFieldRead"		 = "FieldRead",
	"LayoutFieldWrite"	 = "FieldWrite",
	"ArgumentRead"	     = "ArgRead",
	"LocalVariableRead"	 = "LocalRead",
	"LocalVariableWrite" = "LocalWrite",
	"MessageSend"			   = "Send",
	"MethodActivation" 	 = "Activation",
	"AllOperations" 		 = "All",
	"SeveralObjectsFieldRead" 	= "Mega2",
	"SeveralObjectsFieldReadOneMO" 	= "Mono2",
	"SeveralObjectsFieldRead2" 	= "Mega",
	"SeveralObjectsFieldReadOneMO2" = "Mono"
)

allOperationsMop <- change_names(allOperationsMop, name_map, "Benchmark")

allOperationsMop <- droplevels(subset(allOperationsMop, Benchmark != "Mega" & Benchmark != "Mega2" & Benchmark != "Mono" & Benchmark != "Mono2" & Benchmark != "LocalWrite"))

allOperationsMopNormalized <- normalizePerIteration(allOperationsMop,
                                               filterVMs,
                                               list(c("MATEpe","MATEpe-baseline"), c("MATEmt","MATEmt-baseline")),
                                               c("MATEpe-baseline", "MATEmt-baseline"), 
                                               FALSE)
allOperationsMopNormalized$Var <- NULL

#Readonly
rawRO <- getRawData("../../Data/readonly.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe", "MATEmt"), maxIteration = 99)

levels(rawRO$VM) <- c(levels(rawRO$VM), "MATEpe-baseline", "MATEmt-baseline") 
rawRO$VM[rawRO$Benchmark == "SumKeys" & rawRO$VM == "MATEpe"] <- "MATEpe-baseline"
rawRO$VM[rawRO$Benchmark == "SumKeys" & rawRO$VM == "MATEmt"] <- "MATEmt-baseline"
rawRO$Benchmark[rawRO$Benchmark == "ReadonlySumKeys"] <- "SumKeys"
rawRO <- droplevels(subset(rawRO, Benchmark != "DelegationProxiesSumKeys")) 

#rawRO$Benchmark[rawRO$Benchmark == "SumKeys"] <- "Readonly"

rawRONormalized <- normalizePerIteration(rawRO,
                                               filterVMs,
                                               list(c("MATEpe","MATEpe-baseline"), c("MATEmt","MATEmt-baseline")),
                                               c("MATEpe-baseline", "MATEmt-baseline"), 
                                               FALSE)

rawRONormalized <- change_names(rawRONormalized, list("SumKeys"	 = "Readonly"), "Benchmark")

#Tracing
rawTracing <- getRawData("../../Data/tracing.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
                          vmNamesMap(), c("MATEpe", "MATEmt"), maxIteration = 99)

rawTracing <- ddply(rawTracing, ~ Benchmark + VM , transform, 
	Var = grepl("Trace", Benchmark),
	Benchmark = gsub("Trace|Big|Instrumented", "", Benchmark))

levels(rawTracing$VM) <- c(levels(rawTracing$VM), "MATEpe-baseline", "MATEmt-baseline") 
rawTracing$VM[rawTracing$Var == FALSE & rawTracing$VM == "MATEpe"] <- "MATEpe-baseline"
rawTracing$VM[rawTracing$Var == FALSE & rawTracing$VM == "MATEmt"] <- "MATEmt-baseline"

rawTracing$Benchmark[rawTracing$Benchmark == "CD"] <- "CDT"
rawTracing$Benchmark[rawTracing$Benchmark == "Json"] <- "JsonT"
rawTracing$Benchmark[rawTracing$Benchmark == "DeltaBlue"] <- "DeltaBlueT"
rawTracing$Benchmark[rawTracing$Benchmark == "QuickSort"] <- "QuickSortT"

tracingNormalized <- normalizePerIteration(rawTracing,
                                               filterVMs,
                                               list(c("MATEpe","MATEpe-baseline"), c("MATEmt","MATEmt-baseline")),
                                               c("MATEpe-baseline", "MATEmt-baseline"), 
                                               FALSE)

tracingNormalized$Var <- NULL

#warmups <- rbind(rawStandardNormalized, rawRONormalized, allOperationsMopNormalized, summaryDataMop, summaryDataMegamorphic)
warmups <- rbind(rawStandardNormalized, rawRONormalized, allOperationsMopNormalized, tracingNormalized)
#Our transformation function
scaleFUN <- function(x) sprintf("%.1f", x)
@

\def\WarmupsPlot{
<<warmups, fig.width=8, fig.height=7, fig.cap='The first 100 iterations of a subset of the benchmarks in MATEpe and MATEmt normalized (per iteration) to their corresponding SOM versions.', fig.env='figure*'>>=
is.even <- function(x) x %% 2 == 0
plotsforPaper <- c("DeltaBlue", "Havlak", "Json", "Readonly", "Richards", "NBody","Mandelbrot", "Bounce", "CD", "FieldRead", "Activation", "All", "CDT", "FieldWrite", "JsonT")

readonlySummary <- change_names(summaryDataRO, list("MOP" = "Readonly"), "Benchmark")
#summaries <- rbind(summaryDataMicro, summaryDataMacro, readonlySummary)

tracingSummary$Benchmark[tracingSummary$Benchmark == "CD"] <- "CDT"
tracingSummary$Benchmark[tracingSummary$Benchmark == "Json"] <- "JsonT"
tracingSummary$Benchmark[tracingSummary$Benchmark == "DeltaBlue"] <- "DeltaBlueT"
tracingSummary$Benchmark[tracingSummary$Benchmark == "QuickSort"] <- "QuickSortT"

summaries <- rbind(summaryDataMicro, summaryDataMacro, readonlySummary, summaryDataMop, tracingSummary)

i = 0
j = 0
plots <- list()
plotsAppendix <- list()
dir.create("Plots", showWarnings = FALSE)
for (b in levels(warmups$Benchmark)) {
  data_b <- droplevels(subset(warmups, Benchmark == b))
  ci <- ciForVM(summaries, b, c("MATEpe", "MATEmt"))
  plot <- warmup_plot(data_b, b, is.even(i), ci, titleSize = 10)
  pdf(paste(paste("Plots/WU-", b, sep=""), ".pdf", sep=""))
  dev.off()
  if (b %in% plotsforPaper){
    i = i + 1
    plots[[i]] <- plot
  } else {
    j = j + 1
    plotsAppendix[[j]] <- plot
  }  
}
multiplot(plotlist = plots, cols = 3)
@
}

\def\WarmupsPlotAppxs{
<<warmups-appendix, fig.width=6, fig.height=4, fig.cap='The first 100 iterations of a subset of the benchmarks in MATEpe and MATEmt normalized to their corresponding SOM versions.', fig.env='figure*'>>=
multiplot(plotlist = plotsAppendix[c(1:(length(plotsAppendix)%/%2))], cols = 3)
@
}

\def\WarmupsPlotAppendix{
<<warmups-appendix2, fig.width=6, fig.height=4, fig.cap='The first 100 iterations of a subset of the benchmarks in MATEpe and MATEmt normalized to their corresponding SOM versions.', fig.env='figure*'>>=
multiplot(plotlist = plotsAppendix[c((length(plotsAppendix)%/%2) + 1: ceil(length(plotsAppendix)/2))], cols = 3)
@
}



\def\WarmupsTableSummary{
<<warmups-summary-table>>=
iterations <- c(1,5,20,40)
warmups   <- data.frame()
warmupsIndividual <- data.frame()
warmupsRO <- data.frame()
warmupsTracing <- data.frame()

for (i in iterations){
  # AWF + Inherent
  iterRange <- c(0,i)
  summarizedPE <- overheadFactors(subset(rawAWF, VM == "MATEpe"), subset(rawAWF, VM == "SOMpe"), iterRange)
  summarizedMT <- overheadFactors(subset(rawAWF, VM == "MATEmt"), subset(rawAWF, VM == "SOMmt"), iterRange)  
  warmupsIter <- rbind(summarizedPE, summarizedMT)
  
  iter <- list(i)
  warmupsIter <- cbind(warmupsIter, iter)
  colnames(warmupsIter)[ncol(warmupsIter)] <- "Iterations"
  warmups <- rbind(warmups, warmupsIter)
  
  # Individual
  summaryIndividualPE <- overheadFactors(subset(allOperationsMop, VM == "MATEpe" & Benchmark != "LocalWrite"), subset(allOperationsMop, VM == "MATEpe-baseline" & Benchmark != "LocalWrite"), iterRange)
  
  summaryIndividualMT <- overheadFactors(subset(allOperationsMop, VM == "MATEmt" & Benchmark != "LocalWrite"), subset(allOperationsMop, VM == "MATEmt-baseline" & Benchmark != "LocalWrite"), iterRange)  
  
  summaryIndividualIter <- rbind(summaryIndividualPE, summaryIndividualMT)
  
  summaryIndividualIter <- cbind(summaryIndividualIter, iter)
  colnames(summaryIndividualIter)[ncol(summaryIndividualIter)] <- "Iterations"
  warmupsIndividual <- rbind(warmupsIndividual, summaryIndividualIter)
  
  # Readonly
  summaryROPE <- overheadFactors(subset(rawRO, VM == "MATEpe"), subset(rawRO, VM == "MATEpe-baseline"), iterRange)
  summaryROMT <- overheadFactors(subset(rawRO, VM == "MATEmt"), subset(rawRO, VM == "MATEmt-baseline"), iterRange)
  summaryROIter <- rbind(summaryROPE, summaryROMT)
  
  summaryROIter <- cbind(summaryROIter, iter)
  colnames(summaryROIter)[ncol(summaryROIter)] <- "Iterations"
  warmupsRO <- rbind(warmupsRO, summaryROIter)
  
  # Tracing 
  summaryTracingPE <- overheadFactors(subset(rawTracing, VM == "MATEpe"), subset(rawTracing, VM == "MATEpe-baseline"), iterRange)
  summaryTracingMT <- overheadFactors(subset(rawTracing, VM == "MATEmt"), subset(rawTracing, VM == "MATEmt-baseline"), iterRange)
  summaryTracingIter <- rbind(summaryTracingPE, summaryTracingMT)
  
  summaryTracingIter <- cbind(summaryTracingIter, iter)
  colnames(summaryTracingIter)[ncol(summaryTracingIter)] <- "Iterations"
  warmupsTracing <- rbind(warmupsTracing, summaryTracingIter)
}

summaryAll <- rbind(warmups, warmupsIndividual, warmupsRO, warmupsTracing)[,c(2,1,5,3,4)]
colnames(summaryAll)[4] <- "OF"

print(
  kable(arrange(summaryAll, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Overall Warmup Results",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:3))
@
}

\def\WarmupsTableOverall{%
<<warmups-overall-table>>=
colnames(warmups)[3] <- "OF"
summarizedOverall <- summarizeOverall(warmups, ~ VM + Iterations)
#tableData <- summarizedOverall[,c(2:ncol(summarizedOverall))]

colnames(warmupsIndividual)[3] <- "OF"
summarizedIndividual <- summarizeOverall(warmupsIndividual, ~ VM + Iterations)
#tableDataIndividual <- summarizedOverall[,c(2:ncol(summarizedOverall))]

colnames(warmupsRO)[3] <- "OF"
summarizedRO <- summarizeOverall(warmupsRO, ~ VM + Iterations)

colnames(warmupsTracing)[3] <- "OF"
summarizedTracing <- summarizeOverall(warmupsTracing, ~ VM + Iterations)

columnNames <- c("Iterations", "VM", "OF","CI-95%","Sd.", "Min", "Max", "Median")

kable(rbind(arrange(summarizedOverall, Iterations), arrange(summarizedIndividual, Iterations), arrange(summarizedRO, Iterations), arrange(summarizedTracing, Iterations)), 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Overall warmup overhead factor until n iterations clustered by benchmarks",
       col.names=columnNames
      ) %>%
kable_styling(latex_options = c("repeat_header"), font_size = 8) %>%
group_rows("Inherent", 1, 8) %>%
group_rows("Individual", 9, 16) %>% 
group_rows("Readonly", 17, 24) %>%
group_rows("Tracing", 25, 32) 
@
}