<<LanguagesPerformance, echo=FALSE, message=FALSE>>=
knitr::opts_chunk$set(fig.width=10, fig.height=5,
                      echo=FALSE, warning=FALSE, message=FALSE, results="asis")

steady <- getFilteredData("../../Data/areWeFast.data", c("Value", "Benchmark", "VM", "Suite", "Iteration"), vmNamesMap(), 
                          c("SOMpe", "MATEpe", "Java", "Pharo", "Node.js"),
                          iterationsAndInliningFilename, iterationsAndInliningCols, numberOfIterationsPerBenchmark)
  
  
vmNames <- list("Node.js"     = "Node", 
                "MATEpe"      = "Mate",
                "SOMpe"       = "SOM",
                "Pharo"       = "Pharo",
                "Java"        = "Java")

steady <- change_names(steady, vmNames, "VM")

javaSteady <- steady[steady$VM == "Java",]
summarizedPerBenchAndVM <- summarizedPerBenchmark(steady, c(0,10000), javaSteady, "Java")

#To use later in the warmup plots to draw am horizontal line with the mean overhead factor between mate and som
somSteady <- steady[steady$VM == "SOM",]
steadySOMMATE <- droplevels(subset(steady, VM == "Mate" | VM == "SOM"))
normalizedToSOMPerBenchAndVM <- summarizedPerBenchmark(steadySOMMATE, c(0,10000), somSteady, "SOM")

vm_colors <- brewer.pal(12, "Paired")  # to replace scale_fill_brewer(type = "qual", palette = "Paired")

names(vm_colors) <- vmNames

@
\def\LanguagesPerfComparisonPlot{%
<<languages-perf-overview, fig.width=5, fig.height=2, fig.cap='Overhead factor of different dynamic programming language implementations normalized to Java. Benchmarks were selected from Marr et al.\\ in~\\cite{Marr:2016:AWFY}. The suite was designed for cross-comparing language implementations.', out.width = "1\\columnwidth", fig.align="center">>=
overview_box_plot(summarizedPerBenchAndVM, c(1,18))
@
}%

\def\LanguagesTableSummary{%
<<languages-summary-table>>=
awfTableData <- summarizedPerBenchAndVM[,c(2,1,3,4:8)]
print(
  kable(arrange(awfTableData, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Baseline Results",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\LanguagesTableOverall{%
<<languages-overall-table>>=
awfOverall <- summarizeOverall(awfTableData, ~ VM)
colnames <- c("Runtime", "OF","CI-95%","Sd.", "Min","Max", "Median")
kable(arrange(awfOverall, Geomean), 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Overall Baseline Results",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8)
@
}

\def\SomPEMean{
<<languages-summary-sompeMean>>=
cat(round(awfOverall$Geomean[awfOverall$VM == "SOMpe"], digits=2))
@
}

\def\SomMTMean{
<<languages-summary-sommtMean>>=
cat(round(awfOverall$Geomean[awfOverall$VM == "SOMmt"], digits=2))
@
}

\def\NodeMean{
<<languages-summary-nodeMean>>=
cat(round(awfOverall$Geomean[awfOverall$VM == "Node"], digits=2))
@
}

\def\PharoMean{
<<languages-summary-pharoMean>>=
cat(round(awfOverall$Geomean[awfOverall$VM == "Pharo"], digits=2))
@
}
