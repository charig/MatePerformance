<<IndividualMateoperationsPerformance, echo=FALSE, message=FALSE>>=
mop <- getWarmedupData(
  paste(root_path, "/../Data/individualActivations.data", sep=""), 
  c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
  vmNamesMap(), 
  #c("MATEpe", "MATEmt", "MATEpe-NoOpt"),
  c("MATEpe", "MATEmt"),
  numberOfIterationsPerBenchmark)

includeNaive <- FALSE
includeAll <- FALSE

if (!includeAll) {
  mop <- droplevels(subset(mop, mop$Benchmark != "AllOperations" & mop$Benchmark != "VMReflectiveAllOperations"))
}

# More than one reflective operation compares with, i.e, field read or message send.
duplicatedBaselines <- duplicateAndRenameBench(
  mop, 
  c("FieldRead", "FieldRead", "SeveralObjectsFieldRead","SeveralObjectsFieldRead2","FieldWrite", "MessageSend"), 
  c("LayoutFieldRead", "Return", "SeveralObjectsFieldReadOneMO","SeveralObjectsFieldReadOneMO2","LayoutFieldWrite", "MethodActivation"))
allOperations <- rbind(mop, duplicatedBaselines)
                       
allOperations <- ddply(allOperations, ~ Benchmark + VM , transform, 
	Var = grepl("Reflective", Benchmark),
	Benchmark = gsub("VMReflective", "", Benchmark))

allOperations$Benchmark <- factor(allOperations$Benchmark)
#allOperations <- droplevels(subset(allOperations, Benchmark != "VMReflectiveReturn"))
allOperations <- change_names(allOperations, individual_benchs_name_map, "Benchmark")

allOperations <- droplevels(subset(allOperations, VM != "MATEpe-NoOpt" & Benchmark != "LocalWrite"))
allOperationsNormalized <- ddply(allOperations, ~ Benchmark + VM, transform,
                   RuntimeRatio = Value / mean(Value[Var == FALSE]))

mopNormalized <- droplevels(subset(
    allOperationsNormalized, (Var == TRUE & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))

megamorphicNormalized <- droplevels(subset(
    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega"))))

if (includeNaive){
  allOperationNaive <- droplevels(subset(allOperations, VM == "MATEpe" | VM == "MATEpe-NoOpt"))
  allOperationsNaiveNormalized <- ddply(allOperationNaive, ~ Benchmark, transform,
                   RuntimeRatio = Value / mean(Value[Var == FALSE & VM == "MATEpe"]))
  mopNaiveNormalized <- droplevels(subset(
      allOperationsNaiveNormalized, (Var == TRUE & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2" & VM == "MATEpe-NoOpt")))
megamorphicNaiveNormalized <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNaiveNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega") & VM == "MATEpe-NoOpt")))
}

mopNormalizedMT <- droplevels(subset(mopNormalized, VM %in% mtVMs))
mopNormalizedPE <- droplevels(subset(mopNormalized, VM %in% peVMs))

@
\def\IndividualMOPPerfComparisonPlot{%
<<perf-overview-mop, out.width = "0.8\\textwidth", fig.align='center', fig.cap='Overhead factor for redefining VM operations at the language-level. The baseline for each bench, is the execution of the same benchmark in the same VM but without redefining the corresponding VM operation.', fig.width=8, fig.height=4>>=
if (CombineMtAndPe) {
  boxplotMateToSomNormalized(rbind(mopNormalizedPE, mopNormalizedMT), "Overhead Factor", "Benchmark", "Individual Operations Overhead Using the MOP")
} else {
  boxplotMateToSomNormalized(mopNormalizedPE, "Overhead Factor", "Benchmark", "Individual Operations Overhead Using the MOP")
}
@
}%

\def\IndividualMOPNaivePerfComparisonPlot{%
<<perf-overview-mop-naive, fig.width=5, fig.height=2, fig.align='center'>>=
if (includeNaive){
  invididualMOPNaiveBoxplot <- boxplot(list(mopNaiveNormalized), TRUE, "Run Time", list(), fill = TRUE)
  print(invididualMOPNaiveBoxplot)
}
@
}%

\def\MegaMorphicPerfComparisonPlot{%
<<perf-overview-mega, out.width = "0.8\\textwidth", fig.align='center', fig.cap='Peak-performance overhead factor comparison for monomorphic versus megamorphic intercession handling sites.', fig.width = 7, fig.height = 3>>=
boxplotMateToSomNormalized(megamorphicNormalized, "Overhead Factor", "Benchmark", "Monomorphic vs Megamorphic Intercession Handling Site")
@
}%

\def\MegaMorphicNaivePerfComparisonPlot{%
<<perf-overview-mega-naive, fig.width=2, fig.height=2, fig.align='center'>>=
if (includeNaive){
  megamorphicNaiveBoxplot <- boxplot(list(megamorphicNaiveNormalized), TRUE, "Run Time", list(), fill = TRUE)
  print(megamorphicNaiveBoxplot)
}
@
}%

\def\IndividualNaiveAggregatedPlot{
<<perf-overview-individual-aggregated-naive, fig.width=7, fig.height=2, fig.cap='???', fig.align='center'>>=
if (includeNaive){
  multiplot(plotlist = list(invididualMOPNaiveBoxplot, megamorphicNaiveBoxplot), cols = 2)
}
@
}

\def\MopTableSummary{%
<<perf-summary-table-mop, results="asis">>=
mopBaselineMT <- droplevels(subset(
    allOperationsNormalized, (Var == FALSE & VM %in% mtVMs & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))
mopBaselinePE <- droplevels(subset(
    allOperationsNormalized, (Var == FALSE & VM %in% peVMs & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))

summarizedPerBenchmark <- function(data, baseline, baselineName, iterations) {
  if (!missing(iterations))
    data <- droplevels(subset(data, Iteration >= iterations[1] & Iteration <= iterations[2])) 
  if (!missing(baselineName)){
    print ("aaa")
    normalized <- normalizeData(data, ~ Benchmark, baselineName, FALSE)
  } else {
    normalized <- data
  }
  #make it global to use it in ddply
  if (!missing(iterations))
    baselineGlobal <<- droplevels(subset(baseline, Iteration >= iterations[1] & Iteration <= iterations[2] & Benchmark %in% levels(factor(normalized$Benchmark))))
  else
    baselineGlobal <<- droplevels(subset(baseline, Benchmark %in% levels(factor(normalized$Benchmark))))
  print (baselineGlobal)
  print (normalized)
  return (ddply(normalized, ~ VM + Benchmark, summarise, 
                     OF = 
                       tryCatch({
                         t.test.ratio(Value, baselineGlobal[baselineGlobal$Benchmark == Benchmark,]$Value)$estimate[3]
                       }, error = function(e) {
                         mean(Value) / mean(baselineGlobal[baselineGlobal$Benchmark == Benchmark,]$Value)
                       }),
                     Confidence    = 
                       tryCatch({
                          paste(
                          paste("<", 
                            round(t.test.ratio(Value, baselineGlobal[baselineGlobal$Benchmark == Benchmark,]$Value)$conf.int[1], digits = 2), sep=""),
                          paste(
                            round(t.test.ratio(Value, baselineGlobal[baselineGlobal$Benchmark == Benchmark,]$Value)$conf.int[2], digits = 2), ">", sep=""),
                          sep=" - ")
                       }, error = function(e) {
                          "Too few values"
                       }),
                     Sd            = sd(RuntimeRatio),
                     Median        = median(RuntimeRatio),
                     Min           = min(RuntimeRatio),
                     Max           = max(RuntimeRatio)))
}


summarizedMopMT <- summarizedPerBenchmark(mopNormalizedMT, mopBaselineMT) 
summarizedMopPE <- summarizedPerBenchmark(mopNormalizedPE, mopBaselinePE)

summaryDataMop <- rbind(summarizedMopMT, summarizedMopPE)[,c(2,1,3,4:8)]
print(
  kable(arrange(summaryDataMop, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Overall Results for the Individual Operations",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\MegamorphicTableSummary{%
<<perf-summary-table-mega, echo=FALSE, results="asis", cache=FALSE>>=
megamorphicNormalizedMT <- droplevels(subset(megamorphicNormalized, VM %in% mtVMs))
megamorphicNormalizedPE <- droplevels(subset(megamorphicNormalized, VM %in% peVMs))

megamorphicBaselineMT <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNormalized, (Var == FALSE & VM %in% mtVMs & (Benchmark == "Mono" | Benchmark == "Mega"))))
megamorphicBaselinePE <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNormalized, (Var == FALSE & VM %in% peVMs & (Benchmark == "Mono" | Benchmark == "Mega"))))

summarizedMegamorphicMT <- summarizedPerBenchmark(megamorphicNormalizedMT, megamorphicBaselineMT, "") 
summarizedMegamorphicPE <- summarizedPerBenchmark(rbind(megamorphicNormalizedPE), megamorphicBaselinePE, "")

summaryDataMegamorphic <- rbind(summarizedMegamorphicMT, summarizedMegamorphicPE)[,c(2,1,3,4:8)]
print(
  kable(arrange(summaryDataMegamorphic, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Overall Results for the Morphicness Benchmarks",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\IndividualTableOverall{%
<<individual-overall-table>>=
overallMop <- arrange(summarizeOverall(summaryDataMop, ~ VM), OF2)
#overallMega <- arrange(summarizeOverall(summaryDataMegamorphic, ~ VM), OF2)
#summarizedAll <- rbind(summaryDataMop, summaryDataMegamorphic)
#overallAll <- arrange(summarizeOverall(summarizedAll, ~ VM), Geomean)
#overallAggregated <- rbind(overallMop, overallMega, overallAll)[,c(2,1,7,3:6)]

#overallAggregated <- overallMop

colnames <- c("Runtime", "OF","CI-95%","Sd.", "Min","Max", "Median")
kable(overallMop, 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Individual Operation Overall Results",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8) #%>%
#group_rows("Invidivual Operations", 1, 2) #%>%
#group_rows("Morphicness", 3, 4)
@
}

\def\MOPPEMean{
<<individual-summary-peMean>>=
cat(round(overallMop$OF2[overallMop$VM == "MATEpe"], digits=2))
@
}

\def\MOPMTMean{
<<individual-summary-mtMean>>=
cat(round(overallMop$OF2[overallMop$VM == "MATEmt"], digits=2))
@
}

\def\MONOPEMean{
<<mono-summary-peMean>>=
cat(round(summaryDataMegamorphic$OF[summaryDataMegamorphic$VM == "MATEpe" & summaryDataMegamorphic$Benchmark == "Mono"], digits=2))
@
}

\def\MONOMTMean{
<<mono-summary-mtMean>>=
cat(round(summaryDataMegamorphic$OF[summaryDataMegamorphic$VM == "MATEmt" & summaryDataMegamorphic$Benchmark == "Mono"], digits=2))
@
}

\def\MEGAPEMean{
<<mega-summary-peMean>>=
cat(round(summaryDataMegamorphic$OF[summaryDataMegamorphic$VM == "MATEpe" & summaryDataMegamorphic$Benchmark == "Mega"], digits=2))
@
}

\def\MEGAMTMean{
<<mega-summary-mtMean>>=
cat(round(summaryDataMegamorphic$OF[summaryDataMegamorphic$VM == "MATEmt" & summaryDataMegamorphic$Benchmark == "Mega"], digits=2))
@
}