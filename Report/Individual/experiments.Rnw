<<IndividualMateoperationsPerformance, echo=FALSE, message=FALSE>>=
mop <- getWarmedupData(
  paste(root_path, "/../Data/individualActivations.data", sep=""), 
  c("Value", "Benchmark", "VM", "Suite", "Iteration"), 
  vmNamesMap(), 
  #c("MATEpe", "MATEmt", "MATEpe-NoOpt"),
  c("MATEpe", "MATEmt"),
  numberOfIterationsPerBenchmark)

includeNaive <- FALSE

allOperations <- droplevels(subset(mop, (
				(Suite == "mop-operations-steady" & Benchmark != "VMReflectiveFieldRead" & Benchmark != "VMReflectiveFieldWrite"))))

duplicatedOps <- droplevels(subset(mop, Benchmark == "FieldRead" | Benchmark == "SeveralObjectsFieldRead" | Benchmark == "SeveralObjectsFieldRead2" | Benchmark == "FieldWrite" | Benchmark == "MessageSend"))

duplicatedOps <- change_names(duplicatedOps, list("FieldRead" = "LayoutFieldRead", "SeveralObjectsFieldRead" = "SeveralObjectsFieldReadOneMO", "SeveralObjectsFieldRead2" = "SeveralObjectsFieldReadOneMO2", "FieldWrite"	= "LayoutFieldWrite", "MessageSend"	= "MethodActivation"), "Benchmark")

allOperations <- rbind(allOperations, duplicatedOps)

duplicatedOps <- droplevels(subset(mop, Benchmark == "FieldRead"))

duplicatedOps <- change_names(duplicatedOps, list("FieldRead" = "Return"), "Benchmark")

allOperations <- rbind(allOperations, duplicatedOps)

allOperations <- ddply(allOperations, ~ Benchmark + VM , transform, 
	Var = grepl("Reflective", Benchmark),
	Benchmark = gsub("VMReflective", "", Benchmark))

allOperations$Benchmark <- factor(allOperations$Benchmark)
allOperations <- droplevels(subset(allOperations, Benchmark != "VMReflectiveReturn"))

allOperations <- change_names(allOperations, individual_benchs_name_map, "Benchmark")

allOperations <- droplevels(subset(allOperations, VM != "MATEpe-NoOpt" & Benchmark != "LocalWrite"))

allOperationsNormalized <- ddply(allOperations, ~ Benchmark + VM, transform,
                   RuntimeRatio = Value / mean(Value[Var == FALSE]))

mopNormalized <- droplevels(subset(
    allOperationsNormalized, (Var == TRUE & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))

if (includeNaive){
  allOperationNaive <- droplevels(subset(allOperations, VM == "MATEpe" | VM == "MATEpe-NoOpt"))
  allOperationsNaiveNormalized <- ddply(allOperationNaive, ~ Benchmark, transform,
                   RuntimeRatio = Value / mean(Value[Var == FALSE & VM == "MATEpe"]))
  mopNaiveNormalized <- droplevels(subset(
      allOperationsNaiveNormalized, (Var == TRUE & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2" & VM == "MATEpe-NoOpt")))
megamorphicNaiveNormalized <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNaiveNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega") & VM == "MATEpe-NoOpt")))
}

megamorphicNormalized <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega"))))

@
\def\IndividualMOPPerfComparisonPlot{%
<<perf-overview-mop, out.width = "0.8\\textwidth", fig.align='center', fig.cap='Overhead factor for redefining VM operations at the language-level. The baseline for each bench, is the execution of the same benchmark in the same VM but without redefining the corresponding VM operation.', fig.pos = 'H'>>=
boxplotMateToSomNormalized(mopNormalized, "Overhead Factor", "Benchmark", "Individual Operations Overhead Using the MOP")
@
}%

\def\IndividualMOPNaivePerfComparisonPlot{%
<<perf-overview-mop-naive, fig.width=5, fig.height=2, fig.align='center'>>=
if (includeNaive){
  invididualMOPNaiveBoxplot <- boxplot(list(mopNaiveNormalized), TRUE, "Run Time", list(), fill = TRUE)
  print(invididualMOPNaiveBoxplot)
}
@
}%

\def\MegaMorphicPerfComparisonPlot{%
<<perf-overview-mega, out.width = "0.8\\textwidth", fig.align='center', fig.pos = 'H', fig.cap='Overhead factor a monomorphic versus a megamorphic IH site.'>>=
boxplotMateToSomNormalized(megamorphicNormalized, "Overhead Factor", "Benchmark", "Reflective Field Reading: Monomorphic vs Megamorphic Intercession Handling Site")
@
}%

\def\MegaMorphicNaivePerfComparisonPlot{%
<<perf-overview-mega-naive, fig.width=2, fig.height=2, fig.align='center'>>=
if (includeNaive){
  megamorphicNaiveBoxplot <- boxplot(list(megamorphicNaiveNormalized), TRUE, "Run Time", list(), fill = TRUE)
  print(megamorphicNaiveBoxplot)
}
@
}%

\def\IndividualNaiveAggregatedPlot{
<<perf-overview-individual-aggregated-naive, fig.width=7, fig.height=2, fig.cap='???', fig.align='center'>>=
if (includeNaive){
  multiplot(plotlist = list(invididualMOPNaiveBoxplot, megamorphicNaiveBoxplot), cols = 2)
}
@
}

\def\MopTableSummary{%
<<perf-summary-table-mop, results="asis">>=
mopNormalizedMT <- droplevels(subset(mopNormalized, VM %in% mtVMs))
mopNormalizedPE <- droplevels(subset(mopNormalized, VM %in% peVMs))
mopBaselineMT <- droplevels(subset(
    allOperationsNormalized, (Var == FALSE & VM %in% mtVMs & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))
mopBaselinePE <- droplevels(subset(
    allOperationsNormalized, (Var == FALSE & VM %in% peVMs & Benchmark != "Mega" & Benchmark != "Mono" & Benchmark != "Mega2" & Benchmark != "Mono2")))

summarizedMopMT <- summarizedPerBenchmark(mopNormalizedMT, c(0,10000), mopBaselineMT, "", normalized = TRUE) 
summarizedMopPE <- summarizedPerBenchmark(rbind(mopNormalizedPE), c(0,10000), mopBaselinePE, "", normalized = TRUE)

summaryDataMop <- rbind(summarizedMopMT, summarizedMopPE)[,c(2,1,3,4:8)]
print(
  kable(arrange(summaryDataMop, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Overall Results for the Individual Operations",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\MegamorphicTableSummary{%
<<perf-summary-table-mega, echo=FALSE, results="asis", cache=FALSE>>=
megamorphicNormalizedMT <- droplevels(subset(megamorphicNormalized, VM %in% mtVMs))
megamorphicNormalizedPE <- droplevels(subset(megamorphicNormalized, VM %in% peVMs))

megamorphicBaselineMT <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNormalized, (Var == FALSE & VM %in% mtVMs & (Benchmark == "Mono" | Benchmark == "Mega"))))
megamorphicBaselinePE <- droplevels(subset(
#    allOperationsNormalized, (Var == TRUE & (Benchmark == "Mono" | Benchmark == "Mega" | Benchmark == "Mono2" | Benchmark == "Mega2"))))
    allOperationsNormalized, (Var == FALSE & VM %in% peVMs & (Benchmark == "Mono" | Benchmark == "Mega"))))

summarizedMegamorphicMT <- summarizedPerBenchmark(megamorphicNormalizedMT, c(0,10000), megamorphicBaselineMT, "", normalized = TRUE) 
summarizedMegamorphicPE <- summarizedPerBenchmark(rbind(megamorphicNormalizedPE), c(0,10000), megamorphicBaselinePE, "", normalized = TRUE)

summaryDataMegamorphic <- rbind(summarizedMegamorphicMT, summarizedMegamorphicPE)[,c(2,1,3,4:8)]
print(
  kable(arrange(summaryDataMegamorphic, Benchmark), 
       booktabs = T,
       format = "latex",
       longtable = T,
       caption = "Overall Results for the Morphicness Benchmarks",
       digits = 2)  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 7)  %>%
       collapse_rows(columns = 1:2))
@
}

\def\IndividualTableOverall{%
<<individual-overall-table>>=
overallMop <- arrange(summarizeOverall(summaryDataMop, ~ VM), OF2)
overallMega <- arrange(summarizeOverall(summaryDataMegamorphic, ~ VM), OF2)
#summarizedAll <- rbind(summaryDataMop, summaryDataMegamorphic)
#overallAll <- arrange(summarizeOverall(summarizedAll, ~ VM), Geomean)
#overallAggregated <- rbind(overallMop, overallMega, overallAll)[,c(2,1,7,3:6)]

overallAggregated <- rbind(overallMop, overallMega)

colnames <- c("Runtime", "OF","CI-95%","Sd.", "Min","Max", "Median")
kable(overallAggregated, 
       booktabs = T,
       format = "latex",
       digits = 2,
       caption = "Individual Operation Overall Results",
       col.names=colnames
      )  %>%
       kable_styling(latex_options = c("repeat_header"), font_size = 8) %>%
group_rows("Invidivual Operations", 1, 2) %>%
group_rows("Morphicness", 3, 4)
@
}